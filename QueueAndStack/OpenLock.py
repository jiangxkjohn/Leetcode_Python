class Solution:
    
    def Initial(self, num):
        self.maxsize = num + 1
        self.queue = list(range(self.maxsize))
        self.head = 0
        self.tail = 0
        self.hashmap = [0] * self.maxsize
        
    def enQueue(self, value) -> bool:
        if self.isFull():
            return False
        else:
            self.tail = (self.tail + 1) % self.maxsize
            self.queue[self.tail] = value
            return True

    def deQueue(self) -> bool:
        if self.isEmpty():
            return False
        else:
            self.head = (self.head + 1) % self.maxsize
            return True

    def Front(self):
        if self.isEmpty():
            return -1
        else:
            return self.queue[(self.head+1)%self.maxsize]

    def Rear(self):
        if self.isEmpty():
            return -1
        else:
            return self.queue[self.tail]

    def isEmpty(self) -> bool:
        if self.head == self.tail:
            return True
        else:
            return False

    def isFull(self) -> bool:
        if (self.tail + 1) % self.maxsize == self.head:
            return True
        else:
            return False 
    
    def openLock(self, deadends, target: str):
        self.Initial(10000)
        self.enQueue("0000")
        self.mark = "0000"
        self.deadends = deadends
        self.target = target
        self.times = 0
        if "0000" in  self.deadends:
            return -1
        while not self.isEmpty():
            
            if self.next_node(self.Front()):
                return self.times + 1
            if self.mark == self.Front():
                self.mark = self.Rear()
                self.times = self.times + 1
            self.deQueue()
            
        return -1

    def next_node(self, node : str):
        for index in range(4):
            for change in [-1, 1]:
                next = list(node)
                next[index] = str((int(next[index]) + change) % 10)
                next = ''.join(next)
                if next == self.target:
                    return True
                if self.hashmap[int(next)] == 0 and (next not in self.deadends):
                    self.enQueue(next)
                    self.hashmap[int(next)] = 1

            
if __name__ == "__main__":
    s = Solution()
    deadends = ["8887","8889","8878","8898","8788","8988","7888","9888"]
    target = "8888"
    deadends = ["0000"]
    target = "8888"
    deadends = ["0201","0101","0102","1212","2002"]
    target = "0202"
    deadends = ["8887","8889","8878","8898","8788","8988","7888","9888"]
    target = "8888"
    deadends = ["8767","7868","6886","8686","6788","6877","6778","8678","7766","6878","8668","6688","7668","7886","6778","6778","6868","7888","8677","6678","8666","6887","8866","8666","6776","6777","7688","6677","7688","7676","6788","6866","6676","8676","7687","6867","8676","6767","6788","6666","7888","8767","7767","6886","6787","7766","6788","8677","7766","6786","7788","8667","8667","8678","7887","8887","6787","8867","8787","6868","7687","7668","8686","8776","8667","8788","7878","7866","6668","6687","8888","8776","6787","7767","8687","7688","8788","8888","6786","8668","8778","8876","8686","8878","6788","8688","6766","8766","8666","6768","7777","7866","8778","7887","6777","6677","6666","8878","6668","6666","6678","7888","6667","7667","7787","6876","6887","6678","7788","6867","7786","8888","7777","8877","7877","6767","7767","6867","6888","6678","6776","6668","7678","6688","8878","6787","7668","7667","6688","7876","8787","8776","6767","7866","7767","6666","8887","8686","7677","6687","6878","6866","7786","6778","8866","6687","6876","8668","8768","8768","7876","7778","8876","8887","8866","7778","6887","7767","6778","6688","8886","6787","8887","8687","7777","8866","6677","6868","8867","6876","7867","7868","8667","7867","7876","6688","6666","7677","6677","8676","7878","6868","8677","7786","7668","6677","7867","6677","7867","8878","8867","6767","6867","8877","8776","7767","6687","6788","8868","8767","7687","6678","7876","6786","6767","7778","7786","6876","7668","7678","8876","6868","7776","7687","7686","8876","8886","6666","7877","8776","8867","6676","6887","8888","6776","7787","8687","6668","8687","7667","6867","7788","7876","6768","7876","7678","6668","6788","8866","6687","6667","6888","7688","6676","7688","8768","8888","6686","7868","6787","7876","7668","6786","6888","8866","6886","6667","8767","7786","8887","7767","7867","7677","6867","6887","8778","6666","6887","8678","7767","8677","6777","8667","7878","6878","8867","6678","6866","8887","8788","8668","6887","7767","7777","7888","8877","8768","6767","7868","7668","6687","7766","7886","7877","7686","6678","7677","6886","6877","6667","8887","6686","7777","6776","7776","7878","7677","8677","8766","8686","8778","8777","8766","6777","8868","7886","8888","7666","8787","6687","8667","8668","8868","8867","6788","6677","6787","8868","6778","6788","7688","8678","6688","6678","8888","8866","8767","8676","7688","6877","8768","7868","6868","8686","7877","7767","6688","8787","8778","8887","7878","6768","8878","6766","8688","7868","6766","8776","7866","7678","7786","8768","6867","6678","6886","6677","6888","7667","6787","8767","6878","7786","7688","8687","6777","8687","7887","7686","8767","6876","7867","8676","8787","6788","8787","8878","6886","7766","6876","7767","8666","7766","7787","7667","7878","7668","6876","6676","7887","8678","6788","8888","6887","8866","6668","8877","8768","8776","8676","7688","6776","6887","6766","7788","8677","7677","8688","8868","8866","6776","6788","6786","6768","6767","6878","8887","7778","8687","6666","6666","8767","8878","6878","8688","6677","7686","8677","8676","8878","6886","6766","6787","6788","7786","6688","8766","8667","8777","7887","6786","6768","7667","8877","8668","8667","8768","6866","7778","8767","8768","8688","8877","7867","6866","7766","8888","6687","6688","7876","8867","7686","6877","6768","8776","6677","7776","6678","6676","8777","6668","6766","8777","7867","7788","7678","6876","7878","8876","8767","7676","8777","8887","8787","7676","6688","8768","8668","8667","7668","6678"]
    target = "7768"
    print(s.openLock(deadends, target))